// <auto-generated />
using System;
using AccessData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccessData.Migrations
{
    [DbContext(typeof(AmhWebDbContext))]
    partial class AmhWebDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Cuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int?>("IdTarjeta")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoCuenta")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdTarjeta");

                    b.HasIndex("IdTipoCuenta");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Cuenta");
                });

            modelBuilder.Entity("Domain.Models.GestorExpedientes.Acto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Acto");
                });

            modelBuilder.Entity("Domain.Models.GestorExpedientes.Caratula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Caratula");
                });

            modelBuilder.Entity("Domain.Models.GestorExpedientes.Expediente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Avisado")
                        .HasColumnType("bit");

                    b.Property<string>("Documento")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("EnviadoLaborales")
                        .HasColumnType("bit");

                    b.Property<string>("Expediente1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Expediente");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaExpediente")
                        .HasColumnType("date");

                    b.Property<bool?>("FirmadoLaborales")
                        .HasColumnType("bit");

                    b.Property<bool?>("FirmadoSumario")
                        .HasColumnType("bit");

                    b.Property<int?>("IdActo")
                        .HasColumnType("int");

                    b.Property<int?>("IdCaratula")
                        .HasColumnType("int");

                    b.Property<int?>("IdSituacionRevista")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdActo");

                    b.HasIndex("IdCaratula");

                    b.HasIndex("IdSituacionRevista");

                    b.ToTable("Expediente");
                });

            modelBuilder.Entity("Domain.Models.GestorExpedientes.SituacionRevista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SituacionRevista");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Banco");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.Registro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("date");

                    b.Property<int>("IdCuenta")
                        .HasColumnType("int");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("IdRegistroVinculado")
                        .HasColumnType("int");

                    b.Property<int?>("IdSuscripcion")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int?>("NumeroCuota")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("Pagado")
                        .HasColumnType("bit");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric(25, 2)");

                    b.HasKey("Id");

                    b.HasIndex("IdCuenta");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdRegistroVinculado");

                    b.HasIndex("IdSuscripcion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Registro");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.RegistroVinculado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cuotas")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("ValorFinal")
                        .HasColumnType("numeric(25, 2)");

                    b.HasKey("Id");

                    b.ToTable("RegistroVinculado");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.Suscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaDesde")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaHasta")
                        .HasColumnType("date");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("ValorActual")
                        .HasColumnType("numeric(25, 2)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Suscripcion");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.Tarjeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int?>("IdBanco")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoTarjeta")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Vencimiento")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("IdBanco");

                    b.HasIndex("IdTipoTarjeta");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Tarjeta");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.TipoCuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TipoCuenta");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.TipoTarjeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TipoTarjeta");
                });

            modelBuilder.Entity("Domain.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Domain.Models.MayiBeerCollection.Cerveza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Alcohol")
                        .HasColumnType("float");

                    b.Property<int>("Contenido")
                        .HasColumnType("int");

                    b.Property<double?>("IBU")
                        .HasColumnType("float");

                    b.Property<int?>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<int?>("IdEstilo")
                        .HasColumnType("int");

                    b.Property<int>("IdMarca")
                        .HasColumnType("int");

                    b.Property<string>("Imagen")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Observaciones")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("IdEstilo");

                    b.HasIndex("IdMarca");

                    b.ToTable("Cerveza");
                });

            modelBuilder.Entity("Domain.Models.MayiBeerCollection.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdPais")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdPais");

                    b.ToTable("Ciudad");
                });

            modelBuilder.Entity("Domain.Models.MayiBeerCollection.Estilo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Imagen")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Estilo");
                });

            modelBuilder.Entity("Domain.Models.MayiBeerCollection.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Imagen")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Marca");
                });

            modelBuilder.Entity("Domain.Models.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Imagen")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Pais");
                });

            modelBuilder.Entity("Domain.Models.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("Domain.Models.Sistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Sistema");
                });

            modelBuilder.Entity("Domain.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Correo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool?>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int?>("IdPerfil")
                        .HasColumnType("int");

                    b.Property<string>("Imagen")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("IdPerfil");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Domain.Models.UsuarioSistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdSistema")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSistema");

                    b.HasIndex("IdUsuario");

                    b.ToTable("UsuarioSistema");
                });

            modelBuilder.Entity("Domain.Models.Cuenta", b =>
                {
                    b.HasOne("Domain.Models.GestorGastos.Tarjeta", "IdTarjetaNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("IdTarjeta")
                        .HasConstraintName("FK_Cuenta_Tarjeta");

                    b.HasOne("Domain.Models.GestorGastos.TipoCuenta", "IdTipoCuentaNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("IdTipoCuenta")
                        .IsRequired()
                        .HasConstraintName("FK_Cuenta_TipoCuenta");

                    b.HasOne("Domain.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Cuenta_Usuario");

                    b.Navigation("IdTarjetaNavigation");

                    b.Navigation("IdTipoCuentaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Domain.Models.GestorExpedientes.Expediente", b =>
                {
                    b.HasOne("Domain.Models.GestorExpedientes.Acto", "IdActoNavigation")
                        .WithMany("Expediente")
                        .HasForeignKey("IdActo")
                        .HasConstraintName("FK_Expediente_Acto");

                    b.HasOne("Domain.Models.GestorExpedientes.Caratula", "IdCaratulaNavigation")
                        .WithMany("Expediente")
                        .HasForeignKey("IdCaratula")
                        .HasConstraintName("FK_Expediente_Caratula");

                    b.HasOne("Domain.Models.GestorExpedientes.SituacionRevista", "IdSituacionRevistaNavigation")
                        .WithMany("Expediente")
                        .HasForeignKey("IdSituacionRevista")
                        .HasConstraintName("FK_Expediente_SituacionRevista");

                    b.Navigation("IdActoNavigation");

                    b.Navigation("IdCaratulaNavigation");

                    b.Navigation("IdSituacionRevistaNavigation");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.Registro", b =>
                {
                    b.HasOne("Domain.Models.Cuenta", "IdCuentaNavigation")
                        .WithMany("Registro")
                        .HasForeignKey("IdCuenta")
                        .IsRequired()
                        .HasConstraintName("FK_Registro_Cuenta");

                    b.HasOne("Domain.Models.GestorGastos.Empresa", "IdEmpresaNavigation")
                        .WithMany("Registro")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("FK_Registro_Empresa");

                    b.HasOne("Domain.Models.GestorGastos.RegistroVinculado", "IdRegistroVinculadoNavigation")
                        .WithMany("Registro")
                        .HasForeignKey("IdRegistroVinculado")
                        .HasConstraintName("FK_Registro_RegistroVinculado");

                    b.HasOne("Domain.Models.GestorGastos.Suscripcion", "IdSuscripcionNavigation")
                        .WithMany("Registro")
                        .HasForeignKey("IdSuscripcion")
                        .HasConstraintName("FK_Registro_Suscripcion");

                    b.HasOne("Domain.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Registro")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_Registro_Usuario");

                    b.Navigation("IdCuentaNavigation");

                    b.Navigation("IdEmpresaNavigation");

                    b.Navigation("IdRegistroVinculadoNavigation");

                    b.Navigation("IdSuscripcionNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.Suscripcion", b =>
                {
                    b.HasOne("Domain.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Suscripcion")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_Suscripcion_Usuario");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.Tarjeta", b =>
                {
                    b.HasOne("Domain.Models.GestorGastos.Banco", "IdBancoNavigation")
                        .WithMany("Tarjeta")
                        .HasForeignKey("IdBanco")
                        .HasConstraintName("FK_Tarjeta_Banco");

                    b.HasOne("Domain.Models.GestorGastos.TipoTarjeta", "IdTipoTarjetaNavigation")
                        .WithMany("Tarjeta")
                        .HasForeignKey("IdTipoTarjeta")
                        .HasConstraintName("FK_Tarjeta_TipoTarjeta");

                    b.HasOne("Domain.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Tarjeta")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_Tarjeta_Usuario");

                    b.Navigation("IdBancoNavigation");

                    b.Navigation("IdTipoTarjetaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Domain.Models.MayiBeerCollection.Cerveza", b =>
                {
                    b.HasOne("Domain.Models.MayiBeerCollection.Ciudad", "IdCiudadNavigation")
                        .WithMany("Cerveza")
                        .HasForeignKey("IdCiudad")
                        .HasConstraintName("FK_Cerveza_Ciudad");

                    b.HasOne("Domain.Models.MayiBeerCollection.Estilo", "IdEstiloNavigation")
                        .WithMany("Cerveza")
                        .HasForeignKey("IdEstilo")
                        .HasConstraintName("FK_Cerveza_Estilo");

                    b.HasOne("Domain.Models.MayiBeerCollection.Marca", "IdMarcaNavigation")
                        .WithMany("Cerveza")
                        .HasForeignKey("IdMarca")
                        .IsRequired()
                        .HasConstraintName("FK_Cerveza_Marca");

                    b.Navigation("IdCiudadNavigation");

                    b.Navigation("IdEstiloNavigation");

                    b.Navigation("IdMarcaNavigation");
                });

            modelBuilder.Entity("Domain.Models.MayiBeerCollection.Ciudad", b =>
                {
                    b.HasOne("Domain.Models.Pais", "IdPaisNavigation")
                        .WithMany("Ciudad")
                        .HasForeignKey("IdPais")
                        .IsRequired()
                        .HasConstraintName("FK_Ciudad_Pais");

                    b.Navigation("IdPaisNavigation");
                });

            modelBuilder.Entity("Domain.Models.Usuario", b =>
                {
                    b.HasOne("Domain.Models.Perfil", "IdPerfilNavigation")
                        .WithMany("Usuario")
                        .HasForeignKey("IdPerfil")
                        .HasConstraintName("FK_Usuario_Perfil");

                    b.Navigation("IdPerfilNavigation");
                });

            modelBuilder.Entity("Domain.Models.UsuarioSistema", b =>
                {
                    b.HasOne("Domain.Models.Sistema", "IdSistemaNavigation")
                        .WithMany("UsuarioSistema")
                        .HasForeignKey("IdSistema")
                        .IsRequired()
                        .HasConstraintName("FK_UsuarioSistema_Sistema");

                    b.HasOne("Domain.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("UsuarioSistema")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_UsuarioSistema_Usuario");

                    b.Navigation("IdSistemaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Domain.Models.Cuenta", b =>
                {
                    b.Navigation("Registro");
                });

            modelBuilder.Entity("Domain.Models.GestorExpedientes.Acto", b =>
                {
                    b.Navigation("Expediente");
                });

            modelBuilder.Entity("Domain.Models.GestorExpedientes.Caratula", b =>
                {
                    b.Navigation("Expediente");
                });

            modelBuilder.Entity("Domain.Models.GestorExpedientes.SituacionRevista", b =>
                {
                    b.Navigation("Expediente");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.Banco", b =>
                {
                    b.Navigation("Tarjeta");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.Empresa", b =>
                {
                    b.Navigation("Registro");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.RegistroVinculado", b =>
                {
                    b.Navigation("Registro");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.Suscripcion", b =>
                {
                    b.Navigation("Registro");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.Tarjeta", b =>
                {
                    b.Navigation("Cuenta");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.TipoCuenta", b =>
                {
                    b.Navigation("Cuenta");
                });

            modelBuilder.Entity("Domain.Models.GestorGastos.TipoTarjeta", b =>
                {
                    b.Navigation("Tarjeta");
                });

            modelBuilder.Entity("Domain.Models.MayiBeerCollection.Ciudad", b =>
                {
                    b.Navigation("Cerveza");
                });

            modelBuilder.Entity("Domain.Models.MayiBeerCollection.Estilo", b =>
                {
                    b.Navigation("Cerveza");
                });

            modelBuilder.Entity("Domain.Models.MayiBeerCollection.Marca", b =>
                {
                    b.Navigation("Cerveza");
                });

            modelBuilder.Entity("Domain.Models.Pais", b =>
                {
                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("Domain.Models.Perfil", b =>
                {
                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Models.Sistema", b =>
                {
                    b.Navigation("UsuarioSistema");
                });

            modelBuilder.Entity("Domain.Models.Usuario", b =>
                {
                    b.Navigation("Cuenta");

                    b.Navigation("Registro");

                    b.Navigation("Suscripcion");

                    b.Navigation("Tarjeta");

                    b.Navigation("UsuarioSistema");
                });
#pragma warning restore 612, 618
        }
    }
}
